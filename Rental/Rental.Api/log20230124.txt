2023-01-24 20:50:14.169 +01:00 [INF] Now listening on: https://localhost:5001
2023-01-24 20:50:14.325 +01:00 [INF] Now listening on: http://localhost:5000
2023-01-24 20:50:14.344 +01:00 [INF] Application started. Press Ctrl+C to shut down.
2023-01-24 20:50:14.346 +01:00 [INF] Hosting environment: Development
2023-01-24 20:50:14.347 +01:00 [INF] Content root path: C:\App\Rental\Rental\Rental.Api\
2023-01-24 20:50:15.775 +01:00 [INF] Request starting HTTP/2 GET https://localhost:5001/swagger/index.html - -
2023-01-24 20:50:15.924 +01:00 [INF] Request:
Protocol: HTTP/2
Method: GET
Scheme: https
PathBase: 
Path: /swagger/index.html
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Host: localhost:5001
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36
:method: [Redacted]
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9,pl-PL;q=0.8,pl;q=0.7
Upgrade-Insecure-Requests: [Redacted]
sec-fetch-site: [Redacted]
sec-fetch-mode: [Redacted]
sec-fetch-user: [Redacted]
sec-fetch-dest: [Redacted]
sec-ch-ua: [Redacted]
sec-ch-ua-mobile: [Redacted]
sec-ch-ua-platform: [Redacted]
2023-01-24 20:50:16.344 +01:00 [INF] Response:
StatusCode: 200
Content-Type: text/html;charset=utf-8
2023-01-24 20:50:16.703 +01:00 [INF] Request starting HTTP/2 GET https://localhost:5001/_framework/aspnetcore-browser-refresh.js - -
2023-01-24 20:50:16.703 +01:00 [INF] Request starting HTTP/2 GET https://localhost:5001/_vs/browserLink - -
2023-01-24 20:50:16.707 +01:00 [INF] ResponseBody: <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"/swagger/v1/swagger.json","name":"Rental.Api v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

2023-01-24 20:50:16.749 +01:00 [INF] Request finished HTTP/2 GET https://localhost:5001/_framework/aspnetcore-browser-refresh.js - - - 200 11990 application/javascript;+charset=utf-8 38.6113ms
2023-01-24 20:50:16.821 +01:00 [INF] Request finished HTTP/2 GET https://localhost:5001/swagger/index.html - - - 200 - text/html;charset=utf-8 1055.1775ms
2023-01-24 20:50:16.827 +01:00 [INF] Request finished HTTP/2 GET https://localhost:5001/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 124.4521ms
2023-01-24 20:50:17.093 +01:00 [INF] Request starting HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - -
2023-01-24 20:50:17.094 +01:00 [INF] Request:
Protocol: HTTP/2
Method: GET
Scheme: https
PathBase: 
Path: /swagger/v1/swagger.json
Accept: application/json,*/*
Host: localhost:5001
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36
:method: [Redacted]
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9,pl-PL;q=0.8,pl;q=0.7
Referer: [Redacted]
sec-ch-ua: [Redacted]
sec-ch-ua-mobile: [Redacted]
sec-ch-ua-platform: [Redacted]
sec-fetch-site: [Redacted]
sec-fetch-mode: [Redacted]
sec-fetch-dest: [Redacted]
2023-01-24 20:50:17.720 +01:00 [INF] Response:
StatusCode: 200
Content-Type: application/json;charset=utf-8
2023-01-24 20:50:17.721 +01:00 [INF] ResponseBody: {
  "openapi": "3.0.1",
  "info": {
    "title": "Rental.Api",
    "version": "1.0"
  },
  "paths": {
    "/api/Account/Register/Customer": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create new customer account.",
        "requestBody": {
          "description": "Base information about user account.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterCustomer"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterCustomer"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterCustomer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterCustomerResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterCustomerResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterCustomerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/Customer/Details/{username}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Return customer details.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/Status": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Change account status.",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeStatusCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeStatusCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeStatusCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Account/SessionId/{username}": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create new session for customer.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username parameter for who sessione will be create.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSessionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSessionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSessionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/SessionId/Authentication": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Authentication session given in URL",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationSessionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationSessionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationSessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationSessionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationSessionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationSessionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/SessionId/Details": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Check session details and update LastAccessDate",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/Change/Password": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Change password for customer account.",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Account/Register/Authorize/Password/{sessionId}": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Method to authorize password for new created account. This method also authorize session which was created during the first step - create account",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizePasswordRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizePasswordRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Order/detail/{id}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get full information about order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Order/activeOrders": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Return all current active orders for given user",
        "parameters": [
          {
            "name": "sessionId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveOrdersResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveOrdersResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveOrdersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/Create": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Add new product for customer to rental.",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Product/{Id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get product details.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/Booking": {
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Make a reservation product",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductBookingRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductBookingRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductBookingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductBookingResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductBookingResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductBookingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/Cancel": {
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Cancel reservation for the borrowed product.",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelReservationCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelReservationCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CancelReservationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Tools/Generate/Hash": {
      "post": {
        "tags": [
          "Tools"
        ],
        "summary": "Endpoint to calculate hash for password and salt - only for test",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordHashQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordHashQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordHashQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordHashResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordHashResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordHashResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountStatus": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "ActiveOrdersResponse": {
        "type": "object",
        "properties": {
          "orderDetailDtoList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetailDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationSessionRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationSessionResponse": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "nullable": true
          },
          "sessionState": {
            "type": "string",
            "nullable": true
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthorizePasswordRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CancelReservationCommand": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "cancelationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordCommand": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeStatusCommand": {
        "type": "object",
        "properties": {
          "changeStatusRequest": {
            "$ref": "#/components/schemas/ChangeStatusRequest"
          }
        },
        "additionalProperties": false
      },
      "ChangeStatusRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/AccountStatus"
          },
          "reason": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateSessionResponse": {
        "type": "object",
        "properties": {
          "idSession": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/SessionState"
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetCustomerDetailsResponse": {
        "type": "object",
        "properties": {
          "fullname": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/AccountStatus"
          }
        },
        "additionalProperties": false
      },
      "OrderDetailDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "orderStatus": {
            "type": "string",
            "nullable": true
          },
          "orderProduct": {
            "$ref": "#/components/schemas/OrderProduct"
          },
          "validTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderDetailsResponse": {
        "type": "object",
        "properties": {
          "orderDetailDto": {
            "$ref": "#/components/schemas/OrderDetailDto"
          }
        },
        "additionalProperties": false
      },
      "OrderProduct": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PasswordHashQuery": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "nullable": true
          },
          "salt": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PasswordHashResponse": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductBookingRequest": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "to": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductBookingResponse": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "orderTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "numberDays": {
            "$ref": "#/components/schemas/TimeSpan"
          },
          "owner": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductDetail": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "availableQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ProductStatus"
          }
        },
        "additionalProperties": false
      },
      "ProductDetailsResponse": {
        "type": "object",
        "properties": {
          "productDetail": {
            "$ref": "#/components/schemas/ProductDetail"
          }
        },
        "additionalProperties": false
      },
      "ProductRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "categoryName": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductStatus": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "RegisterCustomer": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterCustomerResponse": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SessionDetailsResponse": {
        "type": "object",
        "properties": {
          "sessionStatus": {
            "type": "string",
            "nullable": true
          },
          "sessionId": {
            "type": "string",
            "nullable": true
          },
          "validTo": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SessionState": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "TimeSpan": {
        "type": "object",
        "properties": {
          "ticks": {
            "type": "integer",
            "format": "int64"
          },
          "days": {
            "type": "integer",
            "format": "int32"
          },
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "milliseconds": {
            "type": "integer",
            "format": "int32"
          },
          "minutes": {
            "type": "integer",
            "format": "int32"
          },
          "seconds": {
            "type": "integer",
            "format": "int32"
          },
          "totalDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMilliseconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMinutes": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalSeconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
2023-01-24 20:50:17.722 +01:00 [INF] Request finished HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 628.6509ms
2023-01-24 20:50:25.631 +01:00 [INF] Request starting HTTP/2 GET https://localhost:5001/api/Account/Customer/Details/qwdxq - -
2023-01-24 20:50:25.632 +01:00 [INF] Request:
Protocol: HTTP/2
Method: GET
Scheme: https
PathBase: 
Path: /api/Account/Customer/Details/qwdxq
Accept: text/plain
Host: localhost:5001
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36
:method: [Redacted]
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9,pl-PL;q=0.8,pl;q=0.7
Referer: [Redacted]
sec-ch-ua: [Redacted]
sessionid: [Redacted]
sec-ch-ua-mobile: [Redacted]
sec-ch-ua-platform: [Redacted]
sec-fetch-site: [Redacted]
sec-fetch-mode: [Redacted]
sec-fetch-dest: [Redacted]
2023-01-24 20:50:25.748 +01:00 [INF] Executing endpoint 'Rental.Api.Controllers.AccountController.GetUserDetails (Rental.Api)'
2023-01-24 20:50:25.829 +01:00 [INF] Route matched with {action = "GetUserDetails", controller = "Account"}. Executing controller action with signature System.Threading.Tasks.Task`1[Rental.Infrastructure.Handlers.Account.Query.AccountDetails.GetCustomerDetailsResponse] GetUserDetails(System.String) on controller Rental.Api.Controllers.AccountController (Rental.Api).
2023-01-24 20:50:30.950 +01:00 [INF] Entity Framework Core 6.0.1 initialized 'ApplicationDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:6.0.3+94d0a8eaeb9cf5af6ce55a9e59153c1a1be3244f' with options: None
2023-01-24 20:50:34.019 +01:00 [INF] Executed DbCommand (303ms) [Parameters=[@__username_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT c."CustomerId", c."CreatedAt", c."Email", c."FirstName", c."LastName", c."Phone", c."Status", c."UpdatedAt", c."Username"
FROM "Customers" AS c
WHERE c."Username" = @__username_0
LIMIT 2
2023-01-24 20:50:34.617 +01:00 [ERR] Customer with name qwdxq does not exist. User qwdxq does not exist.
2023-01-24 20:50:35.136 +01:00 [INF] Executed action Rental.Api.Controllers.AccountController.GetUserDetails (Rental.Api) in 9296.099ms
2023-01-24 20:50:35.140 +01:00 [INF] Executed endpoint 'Rental.Api.Controllers.AccountController.GetUserDetails (Rental.Api)'
2023-01-24 20:50:35.429 +01:00 [ERR] An unhandled exception has occurred while executing the request.
Rental.Infrastructure.Exceptions.CoreException: User qwdxq does not exist.
   at Rental.Infrastructure.Helpers.CustomerHelper.GetCustomerAsync(String username) in C:\App\Rental\Rental\Rental.Infrastructure\Helpers\CustomerHelper.cs:line 79
   at Rental.Infrastructure.Handlers.Account.Query.AccountDetails.GetCustomerDetailsHandler.HandleAsync(GetCustomerDetailsRequest command, CancellationToken cancellationToken) in C:\App\Rental\Rental\Rental.Infrastructure\Handlers\Account\Query\AccountDetails\GetCustomerDetailsHandler.cs:line 39
   at Rental.Infrastructure.Query.QueryDispatcher.DispatchAsync[TQuery,TResult](TQuery query) in C:\App\Rental\Rental\Rental.Infrastructure\Query\QueryDispatcher.cs:line 21
   at Rental.Api.Controllers.AccountController.GetUserDetails(String username) in C:\App\Rental\Rental\Rental.Api\Controllers\AccountController.cs:line 58
   at lambda_method380(Closure , Object )
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at RentalCommon.Middleware.CheckHeaderMiddleware.InvokeAsync(HttpContext httpContext) in C:\App\Rental\Rental\RentalCommon\Middleware\CheckHeaderMiddleware.cs:line 17
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware.InvokeInternal(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2023-01-24 20:50:35.616 +01:00 [INF] Request finished HTTP/2 GET https://localhost:5001/api/Account/Customer/Details/qwdxq - - - 500 - text/plain;+charset=utf-8 9985.1914ms
2023-01-24 20:50:56.187 +01:00 [INF] Request starting HTTP/2 GET https://localhost:5001/api/Account/Customer/Details/qwdxq - -
2023-01-24 20:50:56.188 +01:00 [INF] Request:
Protocol: HTTP/2
Method: GET
Scheme: https
PathBase: 
Path: /api/Account/Customer/Details/qwdxq
Accept: text/plain
Host: localhost:5001
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36
:method: [Redacted]
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9,pl-PL;q=0.8,pl;q=0.7
Referer: [Redacted]
sec-ch-ua: [Redacted]
sessionid: [Redacted]
sec-ch-ua-mobile: [Redacted]
sec-ch-ua-platform: [Redacted]
sec-fetch-site: [Redacted]
sec-fetch-mode: [Redacted]
sec-fetch-dest: [Redacted]
2023-01-24 20:50:56.191 +01:00 [INF] Executing endpoint 'Rental.Api.Controllers.AccountController.GetUserDetails (Rental.Api)'
2023-01-24 20:50:56.192 +01:00 [INF] Route matched with {action = "GetUserDetails", controller = "Account"}. Executing controller action with signature System.Threading.Tasks.Task`1[Rental.Infrastructure.Handlers.Account.Query.AccountDetails.GetCustomerDetailsResponse] GetUserDetails(System.String) on controller Rental.Api.Controllers.AccountController (Rental.Api).
2023-01-24 20:51:00.881 +01:00 [INF] Entity Framework Core 6.0.1 initialized 'ApplicationDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:6.0.3+94d0a8eaeb9cf5af6ce55a9e59153c1a1be3244f' with options: None
2023-01-24 20:51:00.939 +01:00 [INF] Executed DbCommand (36ms) [Parameters=[@__username_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT c."CustomerId", c."CreatedAt", c."Email", c."FirstName", c."LastName", c."Phone", c."Status", c."UpdatedAt", c."Username"
FROM "Customers" AS c
WHERE c."Username" = @__username_0
LIMIT 2
2023-01-24 20:51:03.730 +01:00 [ERR] Customer with name qwdxq does not exist. User qwdxq does not exist.
2023-01-24 20:51:03.973 +01:00 [INF] Executed action Rental.Api.Controllers.AccountController.GetUserDetails (Rental.Api) in 7781.0025ms
2023-01-24 20:51:03.974 +01:00 [INF] Executed endpoint 'Rental.Api.Controllers.AccountController.GetUserDetails (Rental.Api)'
2023-01-24 20:51:04.124 +01:00 [ERR] An unhandled exception has occurred while executing the request.
Rental.Infrastructure.Exceptions.CoreException: User qwdxq does not exist.
   at Rental.Infrastructure.Helpers.CustomerHelper.GetCustomerAsync(String username) in C:\App\Rental\Rental\Rental.Infrastructure\Helpers\CustomerHelper.cs:line 79
   at Rental.Infrastructure.Handlers.Account.Query.AccountDetails.GetCustomerDetailsHandler.HandleAsync(GetCustomerDetailsRequest command, CancellationToken cancellationToken) in C:\App\Rental\Rental\Rental.Infrastructure\Handlers\Account\Query\AccountDetails\GetCustomerDetailsHandler.cs:line 39
   at Rental.Infrastructure.Query.QueryDispatcher.DispatchAsync[TQuery,TResult](TQuery query) in C:\App\Rental\Rental\Rental.Infrastructure\Query\QueryDispatcher.cs:line 21
   at Rental.Api.Controllers.AccountController.GetUserDetails(String username) in C:\App\Rental\Rental\Rental.Api\Controllers\AccountController.cs:line 58
   at lambda_method380(Closure , Object )
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at RentalCommon.Middleware.CheckHeaderMiddleware.InvokeAsync(HttpContext httpContext) in C:\App\Rental\Rental\RentalCommon\Middleware\CheckHeaderMiddleware.cs:line 17
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware.InvokeInternal(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2023-01-24 20:51:04.129 +01:00 [INF] Request finished HTTP/2 GET https://localhost:5001/api/Account/Customer/Details/qwdxq - - - 500 - text/plain;+charset=utf-8 7942.2497ms
2023-01-24 20:52:06.111 +01:00 [INF] Request starting HTTP/2 GET https://localhost:5001/api/Account/Customer/Details/andyy - -
2023-01-24 20:52:06.111 +01:00 [INF] Request:
Protocol: HTTP/2
Method: GET
Scheme: https
PathBase: 
Path: /api/Account/Customer/Details/andyy
Accept: text/plain
Host: localhost:5001
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36
:method: [Redacted]
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9,pl-PL;q=0.8,pl;q=0.7
Referer: [Redacted]
sec-ch-ua: [Redacted]
sessionid: [Redacted]
sec-ch-ua-mobile: [Redacted]
sec-ch-ua-platform: [Redacted]
sec-fetch-site: [Redacted]
sec-fetch-mode: [Redacted]
sec-fetch-dest: [Redacted]
2023-01-24 20:52:06.118 +01:00 [INF] Executing endpoint 'Rental.Api.Controllers.AccountController.GetUserDetails (Rental.Api)'
2023-01-24 20:52:06.122 +01:00 [INF] Route matched with {action = "GetUserDetails", controller = "Account"}. Executing controller action with signature System.Threading.Tasks.Task`1[Rental.Infrastructure.Handlers.Account.Query.AccountDetails.GetCustomerDetailsResponse] GetUserDetails(System.String) on controller Rental.Api.Controllers.AccountController (Rental.Api).
2023-01-24 20:52:09.401 +01:00 [INF] Entity Framework Core 6.0.1 initialized 'ApplicationDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:6.0.3+94d0a8eaeb9cf5af6ce55a9e59153c1a1be3244f' with options: None
2023-01-24 20:52:09.540 +01:00 [INF] Executed DbCommand (137ms) [Parameters=[@__username_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT c."CustomerId", c."CreatedAt", c."Email", c."FirstName", c."LastName", c."Phone", c."Status", c."UpdatedAt", c."Username"
FROM "Customers" AS c
WHERE c."Username" = @__username_0
LIMIT 2
2023-01-24 20:52:13.637 +01:00 [INF] Test
2023-01-24 20:52:19.793 +01:00 [INF] Executing ObjectResult, writing value of type 'Rental.Infrastructure.Handlers.Account.Query.AccountDetails.GetCustomerDetailsResponse'.
2023-01-24 20:52:19.798 +01:00 [INF] Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
X-AppName: [Redacted]
X-TraceId: [Redacted]
X-AppVersion: [Redacted]
X-AcceptLanguage: [Redacted]
2023-01-24 20:52:19.798 +01:00 [INF] Executed action Rental.Api.Controllers.AccountController.GetUserDetails (Rental.Api) in 13673.8674ms
2023-01-24 20:52:19.799 +01:00 [INF] Executed endpoint 'Rental.Api.Controllers.AccountController.GetUserDetails (Rental.Api)'
2023-01-24 20:52:19.799 +01:00 [INF] ResponseBody: {"fullname":"Andrzej Gnutek","email":"andrzej@gmail.com","username":"andyy","status":0}
2023-01-24 20:52:19.799 +01:00 [INF] Request finished HTTP/2 GET https://localhost:5001/api/Account/Customer/Details/andyy - - - 200 - application/json;+charset=utf-8 13688.1362ms
[2023-01-24 21:50:45.994 +01:00  INF]  Now listening on: https://localhost:5001
[2023-01-24 21:50:46.144 +01:00  INF]  Now listening on: http://localhost:5000
[2023-01-24 21:50:46.156 +01:00  INF]  Application started. Press Ctrl+C to shut down.
[2023-01-24 21:50:46.157 +01:00  INF]  Hosting environment: Development
[2023-01-24 21:50:46.157 +01:00  INF]  Content root path: C:\App\Rental\Rental\Rental.Api\
[2023-01-24 21:50:47.282 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/swagger/index.html - -
[2023-01-24 21:50:47.432 +01:00  INF]  Request:
Protocol: HTTP/2
Method: GET
Scheme: https
PathBase: 
Path: /swagger/index.html
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Host: localhost:5001
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36
:method: [Redacted]
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9,pl-PL;q=0.8,pl;q=0.7
Upgrade-Insecure-Requests: [Redacted]
sec-fetch-site: [Redacted]
sec-fetch-mode: [Redacted]
sec-fetch-user: [Redacted]
sec-fetch-dest: [Redacted]
sec-ch-ua: [Redacted]
sec-ch-ua-mobile: [Redacted]
sec-ch-ua-platform: [Redacted]
[2023-01-24 21:50:47.708 +01:00  INF]  Response:
StatusCode: 200
Content-Type: text/html;charset=utf-8
[2023-01-24 21:50:47.995 +01:00  INF]  ResponseBody: <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"/swagger/v1/swagger.json","name":"Rental.Api v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

[2023-01-24 21:50:48.009 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/_framework/aspnetcore-browser-refresh.js - -
[2023-01-24 21:50:48.009 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/_vs/browserLink - -
[2023-01-24 21:50:48.030 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/_framework/aspnetcore-browser-refresh.js - - - 200 11990 application/javascript;+charset=utf-8 19.6889ms
[2023-01-24 21:50:48.054 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/swagger/index.html - - - 200 - text/html;charset=utf-8 786.0280ms
[2023-01-24 21:50:48.066 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 56.3485ms
[2023-01-24 21:50:48.247 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - -
[2023-01-24 21:50:48.248 +01:00  INF]  Request:
Protocol: HTTP/2
Method: GET
Scheme: https
PathBase: 
Path: /swagger/v1/swagger.json
Accept: application/json,*/*
Host: localhost:5001
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36
:method: [Redacted]
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9,pl-PL;q=0.8,pl;q=0.7
Referer: [Redacted]
sec-ch-ua: [Redacted]
sec-ch-ua-mobile: [Redacted]
sec-ch-ua-platform: [Redacted]
sec-fetch-site: [Redacted]
sec-fetch-mode: [Redacted]
sec-fetch-dest: [Redacted]
[2023-01-24 21:50:48.301 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/swagger/favicon-32x32.png - -
[2023-01-24 21:50:48.302 +01:00  INF]  Request:
Protocol: HTTP/2
Method: GET
Scheme: https
PathBase: 
Path: /swagger/favicon-32x32.png
Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8
Host: localhost:5001
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36
:method: [Redacted]
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9,pl-PL;q=0.8,pl;q=0.7
Referer: [Redacted]
sec-ch-ua: [Redacted]
sec-ch-ua-mobile: [Redacted]
sec-ch-ua-platform: [Redacted]
sec-fetch-site: [Redacted]
sec-fetch-mode: [Redacted]
sec-fetch-dest: [Redacted]
[2023-01-24 21:50:48.318 +01:00  INF]  Response:
StatusCode: 200
Content-Type: image/png
Accept-Ranges: bytes
ETag: [Redacted]
Last-Modified: Sat, 16 Oct 2021 12:54:30 GMT
Content-Length: 628
[2023-01-24 21:50:48.335 +01:00  INF]  Sending file. Request path: '/favicon-32x32.png'. Physical path: 'N/A'
[2023-01-24 21:50:48.336 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/swagger/favicon-32x32.png - - - 200 628 image/png 35.2376ms
[2023-01-24 21:50:48.692 +01:00  INF]  Response:
StatusCode: 200
Content-Type: application/json;charset=utf-8
[2023-01-24 21:50:48.693 +01:00  INF]  ResponseBody: {
  "openapi": "3.0.1",
  "info": {
    "title": "Rental.Api",
    "version": "1.0"
  },
  "paths": {
    "/api/Account/Register/Customer": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create new customer account.",
        "requestBody": {
          "description": "Base information about user account.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterCustomer"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterCustomer"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterCustomer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterCustomerResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterCustomerResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterCustomerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/Customer/Details/{username}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Return customer details.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/Status": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Change account status.",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeStatusCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeStatusCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeStatusCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Account/SessionId/{username}": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create new session for customer.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username parameter for who sessione will be create.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSessionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSessionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSessionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/SessionId/Authentication": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Authentication session given in URL",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationSessionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationSessionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationSessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationSessionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationSessionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationSessionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/SessionId/Details": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Check session details and update LastAccessDate",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/Change/Password": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Change password for customer account.",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Account/Register/Authorize/Password/{sessionId}": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Method to authorize password for new created account. This method also authorize session which was created during the first step - create account",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizePasswordRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizePasswordRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Order/detail/{id}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get full information about order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Order/activeOrders": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Return all current active orders for given user",
        "parameters": [
          {
            "name": "sessionId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveOrdersResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveOrdersResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveOrdersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/Create": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Add new product for customer to rental.",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Product/{Id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get product details.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/Booking": {
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Make a reservation product",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductBookingRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductBookingRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductBookingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductBookingResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductBookingResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductBookingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/Cancel": {
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Cancel reservation for the borrowed product.",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelReservationCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelReservationCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CancelReservationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Tools/Generate/Hash": {
      "post": {
        "tags": [
          "Tools"
        ],
        "summary": "Endpoint to calculate hash for password and salt - only for test",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordHashQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordHashQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordHashQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordHashResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordHashResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordHashResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountStatus": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "ActiveOrdersResponse": {
        "type": "object",
        "properties": {
          "orderDetailDtoList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetailDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationSessionRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationSessionResponse": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "nullable": true
          },
          "sessionState": {
            "type": "string",
            "nullable": true
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthorizePasswordRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CancelReservationCommand": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "cancelationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordCommand": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeStatusCommand": {
        "type": "object",
        "properties": {
          "changeStatusRequest": {
            "$ref": "#/components/schemas/ChangeStatusRequest"
          }
        },
        "additionalProperties": false
      },
      "ChangeStatusRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/AccountStatus"
          },
          "reason": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateSessionResponse": {
        "type": "object",
        "properties": {
          "idSession": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/SessionState"
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetCustomerDetailsResponse": {
        "type": "object",
        "properties": {
          "fullname": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/AccountStatus"
          }
        },
        "additionalProperties": false
      },
      "OrderDetailDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "orderStatus": {
            "type": "string",
            "nullable": true
          },
          "orderProduct": {
            "$ref": "#/components/schemas/OrderProduct"
          },
          "validTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderDetailsResponse": {
        "type": "object",
        "properties": {
          "orderDetailDto": {
            "$ref": "#/components/schemas/OrderDetailDto"
          }
        },
        "additionalProperties": false
      },
      "OrderProduct": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PasswordHashQuery": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "nullable": true
          },
          "salt": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PasswordHashResponse": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductBookingRequest": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "to": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductBookingResponse": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "orderTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "numberDays": {
            "$ref": "#/components/schemas/TimeSpan"
          },
          "owner": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductDetail": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "availableQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ProductStatus"
          }
        },
        "additionalProperties": false
      },
      "ProductDetailsResponse": {
        "type": "object",
        "properties": {
          "productDetail": {
            "$ref": "#/components/schemas/ProductDetail"
          }
        },
        "additionalProperties": false
      },
      "ProductRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "categoryName": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductStatus": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "RegisterCustomer": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterCustomerResponse": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SessionDetailsResponse": {
        "type": "object",
        "properties": {
          "sessionStatus": {
            "type": "string",
            "nullable": true
          },
          "sessionId": {
            "type": "string",
            "nullable": true
          },
          "validTo": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SessionState": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "TimeSpan": {
        "type": "object",
        "properties": {
          "ticks": {
            "type": "integer",
            "format": "int64"
          },
          "days": {
            "type": "integer",
            "format": "int32"
          },
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "milliseconds": {
            "type": "integer",
            "format": "int32"
          },
          "minutes": {
            "type": "integer",
            "format": "int32"
          },
          "seconds": {
            "type": "integer",
            "format": "int32"
          },
          "totalDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMilliseconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMinutes": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalSeconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
[2023-01-24 21:50:48.693 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 446.4102ms
[2023-01-24 21:52:42.245 +01:00  INF]  Now listening on: https://localhost:5001
[2023-01-24 21:52:42.415 +01:00  INF]  Now listening on: http://localhost:5000
[2023-01-24 21:52:42.435 +01:00  INF]  Application started. Press Ctrl+C to shut down.
[2023-01-24 21:52:42.436 +01:00  INF]  Hosting environment: Development
[2023-01-24 21:52:42.436 +01:00  INF]  Content root path: C:\App\Rental\Rental\Rental.Api\
[2023-01-24 21:52:43.542 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/swagger/index.html - -
[2023-01-24 21:52:43.620 +01:00  INF]  Request:
Protocol: HTTP/2
Method: GET
Scheme: https
PathBase: 
Path: /swagger/index.html
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Host: localhost:5001
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36
:method: [Redacted]
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9,pl-PL;q=0.8,pl;q=0.7
Upgrade-Insecure-Requests: [Redacted]
sec-fetch-site: [Redacted]
sec-fetch-mode: [Redacted]
sec-fetch-user: [Redacted]
sec-fetch-dest: [Redacted]
sec-ch-ua: [Redacted]
sec-ch-ua-mobile: [Redacted]
sec-ch-ua-platform: [Redacted]
[2023-01-24 21:52:44.259 +01:00  INF]  Response:
StatusCode: 200
Content-Type: text/html;charset=utf-8
Date: Tue, 24 Jan 2023 20:52:43 GMT
Server: Kestrel
[2023-01-24 21:52:44.268 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/_framework/aspnetcore-browser-refresh.js - -
[2023-01-24 21:52:44.268 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/_vs/browserLink - -
[2023-01-24 21:52:44.304 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/_framework/aspnetcore-browser-refresh.js - - - 200 11990 application/javascript;+charset=utf-8 21.6833ms
[2023-01-24 21:52:44.347 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/swagger/index.html - - - 200 - text/html;charset=utf-8 811.8498ms
[2023-01-24 21:52:44.356 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 87.8770ms
[2023-01-24 21:52:44.540 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - -
[2023-01-24 21:52:44.541 +01:00  INF]  Request:
Protocol: HTTP/2
Method: GET
Scheme: https
PathBase: 
Path: /swagger/v1/swagger.json
Accept: application/json,*/*
Host: localhost:5001
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36
:method: [Redacted]
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9,pl-PL;q=0.8,pl;q=0.7
Referer: [Redacted]
sec-ch-ua: [Redacted]
sec-ch-ua-mobile: [Redacted]
sec-ch-ua-platform: [Redacted]
sec-fetch-site: [Redacted]
sec-fetch-mode: [Redacted]
sec-fetch-dest: [Redacted]
[2023-01-24 21:52:44.971 +01:00  INF]  Response:
StatusCode: 200
Content-Type: application/json;charset=utf-8
Date: Tue, 24 Jan 2023 20:52:44 GMT
Server: Kestrel
[2023-01-24 21:52:44.973 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 432.4277ms
[2023-01-24 21:54:34.905 +01:00  INF]  Now listening on: https://localhost:5001
[2023-01-24 21:54:34.990 +01:00  INF]  Now listening on: http://localhost:5000
[2023-01-24 21:54:34.996 +01:00  INF]  Application started. Press Ctrl+C to shut down.
[2023-01-24 21:54:34.996 +01:00  INF]  Hosting environment: Development
[2023-01-24 21:54:34.996 +01:00  INF]  Content root path: C:\App\Rental\Rental\Rental.Api\
[2023-01-24 21:54:36.254 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/swagger/index.html - -
[2023-01-24 21:54:36.334 +01:00  INF]  Request:
Protocol: HTTP/2
Method: GET
Scheme: https
PathBase: 
Path: /swagger/index.html
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Host: localhost:5001
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36
:method: [Redacted]
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9,pl-PL;q=0.8,pl;q=0.7
Upgrade-Insecure-Requests: [Redacted]
sec-fetch-site: [Redacted]
sec-fetch-mode: [Redacted]
sec-fetch-user: [Redacted]
sec-fetch-dest: [Redacted]
sec-ch-ua: [Redacted]
sec-ch-ua-mobile: [Redacted]
sec-ch-ua-platform: [Redacted]
[2023-01-24 21:54:36.822 +01:00  INF]  Response:
StatusCode: 200
Content-Type: text/html;charset=utf-8
Date: Tue, 24 Jan 2023 20:54:35 GMT
Server: Kestrel
[2023-01-24 21:54:36.828 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/_framework/aspnetcore-browser-refresh.js - -
[2023-01-24 21:54:36.829 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/_vs/browserLink - -
[2023-01-24 21:54:36.891 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/_framework/aspnetcore-browser-refresh.js - - - 200 11990 application/javascript;+charset=utf-8 61.7692ms
[2023-01-24 21:54:36.942 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/swagger/index.html - - - 200 - text/html;charset=utf-8 699.2254ms
[2023-01-24 21:54:37.022 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 193.5392ms
[2023-01-24 21:54:37.229 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - -
[2023-01-24 21:54:37.230 +01:00  INF]  Request:
Protocol: HTTP/2
Method: GET
Scheme: https
PathBase: 
Path: /swagger/v1/swagger.json
Accept: application/json,*/*
Host: localhost:5001
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36
:method: [Redacted]
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9,pl-PL;q=0.8,pl;q=0.7
Referer: [Redacted]
sec-ch-ua: [Redacted]
sec-ch-ua-mobile: [Redacted]
sec-ch-ua-platform: [Redacted]
sec-fetch-site: [Redacted]
sec-fetch-mode: [Redacted]
sec-fetch-dest: [Redacted]
[2023-01-24 21:54:37.684 +01:00  INF]  Response:
StatusCode: 200
Content-Type: application/json;charset=utf-8
Date: Tue, 24 Jan 2023 20:54:37 GMT
Server: Kestrel
[2023-01-24 21:54:37.684 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 455.0018ms
[2023-01-24 21:55:14.728 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/api/Account/Customer/Details/andyy - -
[2023-01-24 21:55:14.732 +01:00  INF]  Request:
Protocol: HTTP/2
Method: GET
Scheme: https
PathBase: 
Path: /api/Account/Customer/Details/andyy
Accept: text/plain
Host: localhost:5001
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36
:method: [Redacted]
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9,pl-PL;q=0.8,pl;q=0.7
Referer: [Redacted]
sec-ch-ua: [Redacted]
sessionid: [Redacted]
sec-ch-ua-mobile: [Redacted]
sec-ch-ua-platform: [Redacted]
sec-fetch-site: [Redacted]
sec-fetch-mode: [Redacted]
sec-fetch-dest: [Redacted]
[2023-01-24 21:55:14.833 +01:00  INF]  Executing endpoint 'Rental.Api.Controllers.AccountController.GetUserDetails (Rental.Api)'
[2023-01-24 21:55:14.904 +01:00  INF]  Route matched with {action = "GetUserDetails", controller = "Account"}. Executing controller action with signature System.Threading.Tasks.Task`1[Rental.Infrastructure.Handlers.Account.Query.AccountDetails.GetCustomerDetailsResponse] GetUserDetails(System.String) on controller Rental.Api.Controllers.AccountController (Rental.Api).
[2023-01-24 21:55:18.851 +01:00  INF]  Entity Framework Core 6.0.1 initialized 'ApplicationDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:6.0.3+94d0a8eaeb9cf5af6ce55a9e59153c1a1be3244f' with options: None
[2023-01-24 21:55:21.395 +01:00  INF]  Executed DbCommand (283ms) [Parameters=[@__username_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT c."CustomerId", c."CreatedAt", c."Email", c."FirstName", c."LastName", c."Phone", c."Status", c."UpdatedAt", c."Username"
FROM "Customers" AS c
WHERE c."Username" = @__username_0
LIMIT 2
[2023-01-24 21:55:21.725 +01:00  INF]  Test
[2023-01-24 21:55:21.753 +01:00  INF]  Executing ObjectResult, writing value of type 'Rental.Infrastructure.Handlers.Account.Query.AccountDetails.GetCustomerDetailsResponse'.
[2023-01-24 21:55:21.784 +01:00  INF]  Executed action Rental.Api.Controllers.AccountController.GetUserDetails (Rental.Api) in 6859.8026ms
[2023-01-24 21:55:21.790 +01:00  INF]  Executed endpoint 'Rental.Api.Controllers.AccountController.GetUserDetails (Rental.Api)'
[2023-01-24 21:55:21.793 +01:00  INF]  Response:
StatusCode: 200
Content-Type: application/json; charset=utf-8
Date: Tue, 24 Jan 2023 20:55:20 GMT
Server: Kestrel
X-AppName: [Redacted]
X-TraceId: [Redacted]
X-AppVersion: [Redacted]
X-AcceptLanguage: [Redacted]
[2023-01-24 21:55:21.820 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/api/Account/Customer/Details/andyy - - - 200 - application/json;+charset=utf-8 7091.2762ms
[2023-01-24 21:57:50.152 +01:00  INF]  Now listening on: https://localhost:5001
[2023-01-24 21:57:50.367 +01:00  INF]  Now listening on: http://localhost:5000
[2023-01-24 21:57:50.394 +01:00  INF]  Application started. Press Ctrl+C to shut down.
[2023-01-24 21:57:50.396 +01:00  INF]  Hosting environment: Development
[2023-01-24 21:57:50.396 +01:00  INF]  Content root path: C:\App\Rental\Rental\Rental.Api\
[2023-01-24 21:57:52.181 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/swagger/index.html - -
[2023-01-24 21:57:52.377 +01:00  INF]  Request:

[2023-01-24 21:57:52.934 +01:00  INF]  Response:

[2023-01-24 21:57:53.333 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/_vs/browserLink - -
[2023-01-24 21:57:53.333 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/_framework/aspnetcore-browser-refresh.js - -
[2023-01-24 21:57:53.337 +01:00  INF]  ResponseBody: <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"/swagger/v1/swagger.json","name":"Rental.Api v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

[2023-01-24 21:57:53.365 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/_framework/aspnetcore-browser-refresh.js - - - 200 11990 application/javascript;+charset=utf-8 28.8168ms
[2023-01-24 21:57:53.404 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/swagger/index.html - - - 200 - text/html;charset=utf-8 1244.0447ms
[2023-01-24 21:57:53.636 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 302.8174ms
[2023-01-24 21:57:53.978 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - -
[2023-01-24 21:57:53.979 +01:00  INF]  Request:

[2023-01-24 21:57:55.070 +01:00  INF]  Response:

[2023-01-24 21:57:55.074 +01:00  INF]  ResponseBody: {
  "openapi": "3.0.1",
  "info": {
    "title": "Rental.Api",
    "version": "1.0"
  },
  "paths": {
    "/api/Account/Register/Customer": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create new customer account.",
        "requestBody": {
          "description": "Base information about user account.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterCustomer"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterCustomer"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterCustomer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterCustomerResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterCustomerResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterCustomerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/Customer/Details/{username}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Return customer details.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/Status": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Change account status.",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeStatusCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeStatusCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeStatusCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Account/SessionId/{username}": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create new session for customer.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username parameter for who sessione will be create.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSessionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSessionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSessionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/SessionId/Authentication": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Authentication session given in URL",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationSessionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationSessionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationSessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationSessionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationSessionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationSessionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/SessionId/Details": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Check session details and update LastAccessDate",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/Change/Password": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Change password for customer account.",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Account/Register/Authorize/Password/{sessionId}": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Method to authorize password for new created account. This method also authorize session which was created during the first step - create account",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizePasswordRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizePasswordRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Order/detail/{id}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get full information about order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Order/activeOrders": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Return all current active orders for given user",
        "parameters": [
          {
            "name": "sessionId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveOrdersResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveOrdersResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveOrdersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/Create": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Add new product for customer to rental.",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Product/{Id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get product details.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/Booking": {
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Make a reservation product",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductBookingRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductBookingRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductBookingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductBookingResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductBookingResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductBookingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/Cancel": {
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Cancel reservation for the borrowed product.",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelReservationCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelReservationCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CancelReservationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Tools/Generate/Hash": {
      "post": {
        "tags": [
          "Tools"
        ],
        "summary": "Endpoint to calculate hash for password and salt - only for test",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordHashQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordHashQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordHashQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordHashResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordHashResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordHashResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountStatus": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "ActiveOrdersResponse": {
        "type": "object",
        "properties": {
          "orderDetailDtoList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetailDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationSessionRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationSessionResponse": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "nullable": true
          },
          "sessionState": {
            "type": "string",
            "nullable": true
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthorizePasswordRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CancelReservationCommand": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "cancelationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordCommand": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeStatusCommand": {
        "type": "object",
        "properties": {
          "changeStatusRequest": {
            "$ref": "#/components/schemas/ChangeStatusRequest"
          }
        },
        "additionalProperties": false
      },
      "ChangeStatusRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/AccountStatus"
          },
          "reason": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateSessionResponse": {
        "type": "object",
        "properties": {
          "idSession": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/SessionState"
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetCustomerDetailsResponse": {
        "type": "object",
        "properties": {
          "fullname": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/AccountStatus"
          }
        },
        "additionalProperties": false
      },
      "OrderDetailDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "orderStatus": {
            "type": "string",
            "nullable": true
          },
          "orderProduct": {
            "$ref": "#/components/schemas/OrderProduct"
          },
          "validTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderDetailsResponse": {
        "type": "object",
        "properties": {
          "orderDetailDto": {
            "$ref": "#/components/schemas/OrderDetailDto"
          }
        },
        "additionalProperties": false
      },
      "OrderProduct": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PasswordHashQuery": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "nullable": true
          },
          "salt": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PasswordHashResponse": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductBookingRequest": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "to": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductBookingResponse": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "orderTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "numberDays": {
            "$ref": "#/components/schemas/TimeSpan"
          },
          "owner": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductDetail": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "availableQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ProductStatus"
          }
        },
        "additionalProperties": false
      },
      "ProductDetailsResponse": {
        "type": "object",
        "properties": {
          "productDetail": {
            "$ref": "#/components/schemas/ProductDetail"
          }
        },
        "additionalProperties": false
      },
      "ProductRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "categoryName": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductStatus": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "RegisterCustomer": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterCustomerResponse": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SessionDetailsResponse": {
        "type": "object",
        "properties": {
          "sessionStatus": {
            "type": "string",
            "nullable": true
          },
          "sessionId": {
            "type": "string",
            "nullable": true
          },
          "validTo": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SessionState": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "TimeSpan": {
        "type": "object",
        "properties": {
          "ticks": {
            "type": "integer",
            "format": "int64"
          },
          "days": {
            "type": "integer",
            "format": "int32"
          },
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "milliseconds": {
            "type": "integer",
            "format": "int32"
          },
          "minutes": {
            "type": "integer",
            "format": "int32"
          },
          "seconds": {
            "type": "integer",
            "format": "int32"
          },
          "totalDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMilliseconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMinutes": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalSeconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
[2023-01-24 21:57:55.077 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 1099.2214ms
[2023-01-24 22:02:25.680 +01:00  INF]  Request starting HTTP/2 POST https://localhost:5001/api/Account/Register/Customer application/json 120
[2023-01-24 22:02:25.683 +01:00  INF]  Request:

[2023-01-24 22:02:25.780 +01:00  INF]  Executing endpoint 'Rental.Api.Controllers.AccountController.RegisterAccount (Rental.Api)'
[2023-01-24 22:02:25.850 +01:00  INF]  Route matched with {action = "RegisterAccount", controller = "Account"}. Executing controller action with signature System.Threading.Tasks.Task`1[Rental.Infrastructure.Handlers.Account.Command.CreateAccount.RegisterCustomerResponse] RegisterAccount(Rental.Infrastructure.Handlers.Account.Command.CreateAccount.RegisterCustomer) on controller Rental.Api.Controllers.AccountController (Rental.Api).
[2023-01-24 22:02:25.899 +01:00  INF]  RequestBody: {
  "firstName": "string",
  "lastName": "string",
  "username": "string",
  "email": "string",
  "password": "string"
}
[2023-01-24 22:02:30.068 +01:00  INF]  Entity Framework Core 6.0.1 initialized 'ApplicationDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:6.0.3+94d0a8eaeb9cf5af6ce55a9e59153c1a1be3244f' with options: None
[2023-01-24 22:02:32.597 +01:00  INF]  Executed DbCommand (281ms) [Parameters=[@__username_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT c."CustomerId", c."CreatedAt", c."Email", c."FirstName", c."LastName", c."Phone", c."Status", c."UpdatedAt", c."Username"
FROM "Customers" AS c
WHERE c."Username" = @__username_0
LIMIT 2
[2023-01-24 22:02:33.221 +01:00  ERR]  Process registration new customer is failed.
[2023-01-24 22:02:33.576 +01:00  INF]  Executed action Rental.Api.Controllers.AccountController.RegisterAccount (Rental.Api) in 7706.2039ms
[2023-01-24 22:02:33.580 +01:00  INF]  Executed endpoint 'Rental.Api.Controllers.AccountController.RegisterAccount (Rental.Api)'
[2023-01-24 22:02:33.652 +01:00  ERR]  An unhandled exception has occurred while executing the request.
System.Exception: Registration is failed. Address email string is incorrect
 ---> System.Exception: Registration is failed. Address email string is incorrect
   at Rental.Infrastructure.Helpers.CustomerHelper.RegisterAsync(String firstName, String lastName, String username, String email) in C:\App\Rental\Rental\Rental.Infrastructure\Helpers\CustomerHelper.cs:line 47
   at Rental.Infrastructure.Handlers.Account.Command.CreateAccount.RegisterCustomerHandler.HandleAsync(RegisterCustomer command, CancellationToken cancellationToken) in C:\App\Rental\Rental\Rental.Infrastructure\Handlers\Account\Command\CreateAccount\RegisterCustomerHandler.cs:line 45
   --- End of inner exception stack trace ---
   at Rental.Infrastructure.Handlers.Account.Command.CreateAccount.RegisterCustomerHandler.HandleAsync(RegisterCustomer command, CancellationToken cancellationToken) in C:\App\Rental\Rental\Rental.Infrastructure\Handlers\Account\Command\CreateAccount\RegisterCustomerHandler.cs:line 73
   at Rental.Infrastructure.Command.CommandDispatcher.DispatchAsync[TCommand,TResult](TCommand command) in C:\App\Rental\Rental\Rental.Infrastructure\Command\CommandDispatcher.cs:line 37
   at Rental.Api.Controllers.AccountController.RegisterAccount(RegisterCustomer command) in C:\App\Rental\Rental\Rental.Api\Controllers\AccountController.cs:line 41
   at lambda_method380(Closure , Object )
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at RentalCommon.Middleware.CheckHeaderMiddleware.InvokeAsync(HttpContext httpContext) in C:\App\Rental\Rental\RentalCommon\Middleware\CheckHeaderMiddleware.cs:line 17
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware.InvokeInternal(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
[2023-01-24 22:02:33.749 +01:00  INF]  Request finished HTTP/2 POST https://localhost:5001/api/Account/Register/Customer application/json 120 - 500 - text/plain;+charset=utf-8 8069.2439ms
[2023-01-24 22:03:40.583 +01:00  INF]  Request starting HTTP/2 POST https://localhost:5001/api/Account/Register/Customer application/json 130
[2023-01-24 22:03:40.584 +01:00  INF]  Request:

[2023-01-24 22:03:40.620 +01:00  INF]  Executing endpoint 'Rental.Api.Controllers.AccountController.RegisterAccount (Rental.Api)'
[2023-01-24 22:03:40.621 +01:00  INF]  Route matched with {action = "RegisterAccount", controller = "Account"}. Executing controller action with signature System.Threading.Tasks.Task`1[Rental.Infrastructure.Handlers.Account.Command.CreateAccount.RegisterCustomerResponse] RegisterAccount(Rental.Infrastructure.Handlers.Account.Command.CreateAccount.RegisterCustomer) on controller Rental.Api.Controllers.AccountController (Rental.Api).
[2023-01-24 22:03:40.622 +01:00  INF]  RequestBody: {
  "firstName": "string",
  "lastName": "string",
  "username": "string",
  "email": "string@email.com",
  "password": "string"
}
[2023-01-24 22:03:40.717 +01:00  INF]  Entity Framework Core 6.0.1 initialized 'ApplicationDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:6.0.3+94d0a8eaeb9cf5af6ce55a9e59153c1a1be3244f' with options: None
[2023-01-24 22:03:40.730 +01:00  INF]  Executed DbCommand (4ms) [Parameters=[@__username_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT c."CustomerId", c."CreatedAt", c."Email", c."FirstName", c."LastName", c."Phone", c."Status", c."UpdatedAt", c."Username"
FROM "Customers" AS c
WHERE c."Username" = @__username_0
LIMIT 2
[2023-01-24 22:03:40.741 +01:00  INF]  Executed DbCommand (4ms) [Parameters=[@__email_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT c."CustomerId", c."CreatedAt", c."Email", c."FirstName", c."LastName", c."Phone", c."Status", c."UpdatedAt", c."Username"
FROM "Customers" AS c
WHERE c."Email" = @__email_0
LIMIT 2
[2023-01-24 22:03:41.712 +01:00  INF]  Executed DbCommand (140ms) [Parameters=[@p0='?' (DbType = DateTime), @p1='?', @p2='?', @p3='?', @p4='?', @p5='?' (DbType = Int32), @p6='?' (DbType = DateTime), @p7='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Customers" ("CreatedAt", "Email", "FirstName", "LastName", "Phone", "Status", "UpdatedAt", "Username")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7)
RETURNING "CustomerId";
[2023-01-24 22:03:42.202 +01:00  INF]  Executed DbCommand (54ms) [Parameters=[@__username_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT s."SessionIdentifier", s."CreatedAt", s."GenerationDate", s."IdCustomer", s."LastAccessDate", s."State", s."UpdatedAt"
FROM "Sessions" AS s
INNER JOIN "Customers" AS c ON s."IdCustomer" = c."CustomerId"
WHERE c."Username" = @__username_0
[2023-01-24 22:03:42.383 +01:00  INF]  Executed DbCommand (59ms) [Parameters=[@p0='?', @p1='?' (DbType = DateTime), @p2='?' (DbType = DateTime), @p3='?' (DbType = Int32), @p4='?' (DbType = DateTime), @p5='?' (DbType = Int32), @p6='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Sessions" ("SessionIdentifier", "CreatedAt", "GenerationDate", "IdCustomer", "LastAccessDate", "State", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
[2023-01-24 22:03:42.390 +01:00  INF]  Activation code 400793
[2023-01-24 22:03:43.634 +01:00  INF]  Executed DbCommand (70ms) [Parameters=[@p0='?', @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = Int32), @p4='?' (DbType = DateTime), @p5='?' (DbType = DateTime), @p6='?', @p7='?' (DbType = DateTime), @p8='?' (DbType = DateTime), @p9='?' (DbType = Boolean), @p10='?', @p11='?' (DbType = Int32), @p12='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Passwords" ("PasswordId", "ActivationCode", "CreatedAt", "CustomerId", "ExpirationDate", "FailedLoginDate", "Hash", "LastChangeDate", "LastSuccessfulLoginDate", "NewPassword", "Salt", "Status", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12);
[2023-01-24 22:03:43.682 +01:00  INF]  Registration process was successful. Activation code has been sent on given address email.
[2023-01-24 22:03:43.709 +01:00  INF]  Executing ObjectResult, writing value of type 'Rental.Infrastructure.Handlers.Account.Command.CreateAccount.RegisterCustomerResponse'.
[2023-01-24 22:03:43.715 +01:00  INF]  Response:

[2023-01-24 22:03:43.718 +01:00  INF]  Executed action Rental.Api.Controllers.AccountController.RegisterAccount (Rental.Api) in 3096.4352ms
[2023-01-24 22:03:43.720 +01:00  INF]  Executed endpoint 'Rental.Api.Controllers.AccountController.RegisterAccount (Rental.Api)'
[2023-01-24 22:03:43.724 +01:00  INF]  ResponseBody: {"sessionId":"824ba6c8317247ca87535ad08b5973a0"}
[2023-01-24 22:03:43.725 +01:00  INF]  Request finished HTTP/2 POST https://localhost:5001/api/Account/Register/Customer application/json 130 - 400 - application/json;+charset=utf-8 3144.7214ms
[2023-01-24 22:04:02.833 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/api/Account/Customer/Details/andyy - -
[2023-01-24 22:04:02.833 +01:00  INF]  Request:

[2023-01-24 22:04:02.842 +01:00  INF]  Executing endpoint 'Rental.Api.Controllers.AccountController.GetUserDetails (Rental.Api)'
[2023-01-24 22:04:02.857 +01:00  INF]  Route matched with {action = "GetUserDetails", controller = "Account"}. Executing controller action with signature System.Threading.Tasks.Task`1[Rental.Infrastructure.Handlers.Account.Query.AccountDetails.GetCustomerDetailsResponse] GetUserDetails(System.String) on controller Rental.Api.Controllers.AccountController (Rental.Api).
[2023-01-24 22:04:02.986 +01:00  INF]  Entity Framework Core 6.0.1 initialized 'ApplicationDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:6.0.3+94d0a8eaeb9cf5af6ce55a9e59153c1a1be3244f' with options: None
[2023-01-24 22:04:03.048 +01:00  INF]  Executed DbCommand (12ms) [Parameters=[@__username_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT c."CustomerId", c."CreatedAt", c."Email", c."FirstName", c."LastName", c."Phone", c."Status", c."UpdatedAt", c."Username"
FROM "Customers" AS c
WHERE c."Username" = @__username_0
LIMIT 2
[2023-01-24 22:04:03.110 +01:00  INF]  Test
[2023-01-24 22:04:03.112 +01:00  INF]  Executing ObjectResult, writing value of type 'Rental.Infrastructure.Handlers.Account.Query.AccountDetails.GetCustomerDetailsResponse'.
[2023-01-24 22:04:03.117 +01:00  INF]  Response:

[2023-01-24 22:04:03.117 +01:00  INF]  Executed action Rental.Api.Controllers.AccountController.GetUserDetails (Rental.Api) in 260.4389ms
[2023-01-24 22:04:03.117 +01:00  INF]  Executed endpoint 'Rental.Api.Controllers.AccountController.GetUserDetails (Rental.Api)'
[2023-01-24 22:04:03.118 +01:00  INF]  ResponseBody: {"fullname":"Andrzej Gnutek","email":"andrzej@gmail.com","username":"andyy","status":0}
[2023-01-24 22:04:03.118 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/api/Account/Customer/Details/andyy - - - 200 - application/json;+charset=utf-8 286.2856ms
[2023-01-24 22:07:10.361 +01:00  INF]  Now listening on: https://localhost:5001
[2023-01-24 22:07:10.556 +01:00  INF]  Now listening on: http://localhost:5000
[2023-01-24 22:07:10.570 +01:00  INF]  Application started. Press Ctrl+C to shut down.
[2023-01-24 22:07:10.574 +01:00  INF]  Hosting environment: Development
[2023-01-24 22:07:10.577 +01:00  INF]  Content root path: C:\App\Rental\Rental\Rental.Api\
[2023-01-24 22:07:11.551 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/swagger/index.html - -
[2023-01-24 22:07:11.649 +01:00  INF]  Request:

[2023-01-24 22:07:11.986 +01:00  INF]  Response:

[2023-01-24 22:07:12.388 +01:00  INF]  ResponseBody: <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"/swagger/v1/swagger.json","name":"Rental.Api v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

[2023-01-24 22:07:12.422 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/_vs/browserLink - -
[2023-01-24 22:07:12.426 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/_framework/aspnetcore-browser-refresh.js - -
[2023-01-24 22:07:12.474 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/_framework/aspnetcore-browser-refresh.js - - - 200 11990 application/javascript;+charset=utf-8 43.5818ms
[2023-01-24 22:07:12.526 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/swagger/index.html - - - 200 - text/html;charset=utf-8 984.1851ms
[2023-01-24 22:07:12.580 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 158.5218ms
[2023-01-24 22:07:12.831 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - -
[2023-01-24 22:07:12.834 +01:00  INF]  Request:

[2023-01-24 22:07:13.374 +01:00  INF]  Response:

[2023-01-24 22:07:13.377 +01:00  INF]  ResponseBody: {
  "openapi": "3.0.1",
  "info": {
    "title": "Rental.Api",
    "version": "1.0"
  },
  "paths": {
    "/api/Account/Register/Customer": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create new customer account.",
        "requestBody": {
          "description": "Base information about user account.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterCustomer"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterCustomer"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterCustomer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterCustomerResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterCustomerResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterCustomerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/Customer/Details/{username}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Return customer details.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/Status": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Change account status.",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeStatusCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeStatusCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeStatusCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Account/SessionId/{username}": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create new session for customer.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username parameter for who sessione will be create.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSessionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSessionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSessionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/SessionId/Authentication": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Authentication session given in URL",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationSessionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationSessionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationSessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationSessionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationSessionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationSessionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/SessionId/Details": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Check session details and update LastAccessDate",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/Change/Password": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Change password for customer account.",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Account/Register/Authorize/Password/{sessionId}": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Method to authorize password for new created account. This method also authorize session which was created during the first step - create account",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizePasswordRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizePasswordRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Order/detail/{id}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get full information about order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Order/activeOrders": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Return all current active orders for given user",
        "parameters": [
          {
            "name": "sessionId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveOrdersResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveOrdersResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveOrdersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/Create": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Add new product for customer to rental.",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Product/{Id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get product details.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/Booking": {
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Make a reservation product",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductBookingRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductBookingRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductBookingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductBookingResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductBookingResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductBookingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/Cancel": {
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Cancel reservation for the borrowed product.",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelReservationCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelReservationCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CancelReservationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Tools/Generate/Hash": {
      "post": {
        "tags": [
          "Tools"
        ],
        "summary": "Endpoint to calculate hash for password and salt - only for test",
        "parameters": [
          {
            "name": "SessionId",
            "in": "header",
            "required": true,
            "schema": {
              "type": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordHashQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordHashQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordHashQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordHashResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordHashResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordHashResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountStatus": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "ActiveOrdersResponse": {
        "type": "object",
        "properties": {
          "orderDetailDtoList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetailDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationSessionRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationSessionResponse": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "nullable": true
          },
          "sessionState": {
            "type": "string",
            "nullable": true
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthorizePasswordRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CancelReservationCommand": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "cancelationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordCommand": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeStatusCommand": {
        "type": "object",
        "properties": {
          "changeStatusRequest": {
            "$ref": "#/components/schemas/ChangeStatusRequest"
          }
        },
        "additionalProperties": false
      },
      "ChangeStatusRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/AccountStatus"
          },
          "reason": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateSessionResponse": {
        "type": "object",
        "properties": {
          "idSession": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/SessionState"
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetCustomerDetailsResponse": {
        "type": "object",
        "properties": {
          "fullname": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/AccountStatus"
          }
        },
        "additionalProperties": false
      },
      "OrderDetailDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "orderStatus": {
            "type": "string",
            "nullable": true
          },
          "orderProduct": {
            "$ref": "#/components/schemas/OrderProduct"
          },
          "validTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderDetailsResponse": {
        "type": "object",
        "properties": {
          "orderDetailDto": {
            "$ref": "#/components/schemas/OrderDetailDto"
          }
        },
        "additionalProperties": false
      },
      "OrderProduct": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PasswordHashQuery": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "nullable": true
          },
          "salt": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PasswordHashResponse": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductBookingRequest": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "to": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductBookingResponse": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "orderTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "numberDays": {
            "$ref": "#/components/schemas/TimeSpan"
          },
          "owner": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductDetail": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "availableQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ProductStatus"
          }
        },
        "additionalProperties": false
      },
      "ProductDetailsResponse": {
        "type": "object",
        "properties": {
          "productDetail": {
            "$ref": "#/components/schemas/ProductDetail"
          }
        },
        "additionalProperties": false
      },
      "ProductRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "categoryName": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductStatus": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "RegisterCustomer": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterCustomerResponse": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SessionDetailsResponse": {
        "type": "object",
        "properties": {
          "sessionStatus": {
            "type": "string",
            "nullable": true
          },
          "sessionId": {
            "type": "string",
            "nullable": true
          },
          "validTo": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SessionState": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "TimeSpan": {
        "type": "object",
        "properties": {
          "ticks": {
            "type": "integer",
            "format": "int64"
          },
          "days": {
            "type": "integer",
            "format": "int32"
          },
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "milliseconds": {
            "type": "integer",
            "format": "int32"
          },
          "minutes": {
            "type": "integer",
            "format": "int32"
          },
          "seconds": {
            "type": "integer",
            "format": "int32"
          },
          "totalDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMilliseconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMinutes": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalSeconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
[2023-01-24 22:07:13.453 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 622.7416ms
[2023-01-24 22:07:22.632 +01:00  INF]  Request starting HTTP/2 GET https://localhost:5001/api/Account/Customer/Details/andyy - -
[2023-01-24 22:07:22.635 +01:00  INF]  Request:

[2023-01-24 22:07:22.701 +01:00  INF]  Executing endpoint 'Rental.Api.Controllers.AccountController.GetUserDetails (Rental.Api)'
[2023-01-24 22:07:22.780 +01:00  INF]  Route matched with {action = "GetUserDetails", controller = "Account"}. Executing controller action with signature System.Threading.Tasks.Task`1[Rental.Infrastructure.Handlers.Account.Query.AccountDetails.GetCustomerDetailsResponse] GetUserDetails(System.String) on controller Rental.Api.Controllers.AccountController (Rental.Api).
[2023-01-24 22:07:27.080 +01:00  INF]  Entity Framework Core 6.0.1 initialized 'ApplicationDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:6.0.3+94d0a8eaeb9cf5af6ce55a9e59153c1a1be3244f' with options: None
[2023-01-24 22:07:29.717 +01:00  INF]  Executed DbCommand (301ms) [Parameters=[@__username_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT c."CustomerId", c."CreatedAt", c."Email", c."FirstName", c."LastName", c."Phone", c."Status", c."UpdatedAt", c."Username"
FROM "Customers" AS c
WHERE c."Username" = @__username_0
LIMIT 2
[2023-01-24 22:07:30.090 +01:00  INF]  Test
[2023-01-24 22:07:30.133 +01:00  INF]  Executing ObjectResult, writing value of type 'Rental.Infrastructure.Handlers.Account.Query.AccountDetails.GetCustomerDetailsResponse'.
[2023-01-24 22:07:30.170 +01:00  INF]  Response:

[2023-01-24 22:07:30.233 +01:00  INF]  Executed action Rental.Api.Controllers.AccountController.GetUserDetails (Rental.Api) in 7404.9331ms
[2023-01-24 22:07:30.247 +01:00  INF]  Executed endpoint 'Rental.Api.Controllers.AccountController.GetUserDetails (Rental.Api)'
[2023-01-24 22:07:30.254 +01:00  INF]  ResponseBody: {"fullname":"Andrzej Gnutek","email":"andrzej@gmail.com","username":"andyy","status":0}
[2023-01-24 22:07:30.287 +01:00  INF]  Request finished HTTP/2 GET https://localhost:5001/api/Account/Customer/Details/andyy - - - 200 - application/json;+charset=utf-8 7654.6542ms
[2023-01-24 22:20:04.230 +01:00  INF]  Start Web Application
[2023-01-24 22:20:06.089 +01:00  FTL]  Application startup exception
System.InvalidOperationException: Unable to resolve service for type 'Serilog.Extensions.Hosting.DiagnosticContext' while attempting to activate 'Serilog.AspNetCore.RequestLoggingMiddleware'.
   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)
   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass5_0.<UseMiddleware>b__0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.<ConfigureApplication>b__27_0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)
[2023-01-24 22:21:33.795 +01:00  INF]  Start Web Application
[2023-01-24 22:21:35.468 +01:00  FTL]  Application startup exception
System.InvalidOperationException: Unable to resolve service for type 'Serilog.Extensions.Hosting.DiagnosticContext' while attempting to activate 'Serilog.AspNetCore.RequestLoggingMiddleware'.
   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)
   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass5_0.<UseMiddleware>b__0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.<ConfigureApplication>b__27_0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)
[2023-01-24 22:22:01.193 +01:00  INF]  Start Web Application
[2023-01-24 22:22:03.509 +01:00  FTL]  Application startup exception
System.InvalidOperationException: Unable to resolve service for type 'Serilog.Extensions.Hosting.DiagnosticContext' while attempting to activate 'Serilog.AspNetCore.RequestLoggingMiddleware'.
   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)
   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass5_0.<UseMiddleware>b__0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.<ConfigureApplication>b__27_0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)
